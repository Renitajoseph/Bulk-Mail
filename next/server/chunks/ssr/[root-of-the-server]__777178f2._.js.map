{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/ai-rate-limiter.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Implements an AI-powered rate limiter for email sending.\n *\n * - `rateLimitEmail` -  A function that determines whether an email should be sent based on real-time factors.\n * - `RateLimitEmailInput` - The input type for the rateLimitEmail function.\n * - `RateLimitEmailOutput` - The return type for the rateLimitEmail function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst RateLimitEmailInputSchema = z.object({\n  recipientEmail: z.string().email().describe('The email address of the recipient.'),\n  emailContent: z.string().describe('The content of the email being sent.'),\n  senderReputationScore: z\n    .number()\n    .min(0)\n    .max(1)\n    .describe(\n      'A score representing the sender reputation, from 0 (poor) to 1 (excellent).'\n    ),\n  recipientEngagementScore: z\n    .number()\n    .min(0)\n    .max(1)\n    .describe(\n      'A score representing the recipient engagement, from 0 (no engagement) to 1 (high engagement).'\n    ),\n});\nexport type RateLimitEmailInput = z.infer<typeof RateLimitEmailInputSchema>;\n\nconst RateLimitEmailOutputSchema = z.object({\n  shouldSendEmail: z\n    .boolean()\n    .describe(\n      'A boolean value indicating whether the email should be sent (true) or blocked (false).'\n    ),\n  reason: z\n    .string()\n    .describe(\n      'A string providing a reason for the decision, for logging or debugging purposes.'\n    ),\n});\nexport type RateLimitEmailOutput = z.infer<typeof RateLimitEmailOutputSchema>;\n\nexport async function rateLimitEmail(input: RateLimitEmailInput): Promise<RateLimitEmailOutput> {\n  return rateLimitEmailFlow(input);\n}\n\nconst rateLimitPrompt = ai.definePrompt({\n  name: 'rateLimitPrompt',\n  input: {schema: RateLimitEmailInputSchema},\n  output: {schema: RateLimitEmailOutputSchema},\n  prompt: `You are an AI-powered rate limiter that dynamically adjusts email sending frequency to avoid spam flags.\n\n  Based on the following information, determine whether an email should be sent to the recipient:\n\n  - Recipient Email: {{{recipientEmail}}}\n  - Email Content: {{{emailContent}}}\n  - Sender Reputation Score: {{{senderReputationScore}}} (0 = Poor, 1 = Excellent)\n  - Recipient Engagement Score: {{{recipientEngagementScore}}} (0 = No Engagement, 1 = High Engagement)\n\n  Consider factors such as sender reputation, recipient engagement, and email content to make your decision.\n\n  Respond with JSON in the following format:\n  {\n    \"shouldSendEmail\": true or false,\n    \"reason\": \"A brief explanation for the decision\"\n  }`,\n});\n\nconst rateLimitEmailFlow = ai.defineFlow(\n  {\n    name: 'rateLimitEmailFlow',\n    inputSchema: RateLimitEmailInputSchema,\n    outputSchema: RateLimitEmailOutputSchema,\n  },\n  async input => {\n    const {output} = await rateLimitPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,GAAG,QAAQ,CAAC;IAC5C,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,uBAAuB,uIAAA,CAAA,IAAC,CACrB,MAAM,GACN,GAAG,CAAC,GACJ,GAAG,CAAC,GACJ,QAAQ,CACP;IAEJ,0BAA0B,uIAAA,CAAA,IAAC,CACxB,MAAM,GACN,GAAG,CAAC,GACJ,GAAG,CAAC,GACJ,QAAQ,CACP;AAEN;AAGA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,iBAAiB,uIAAA,CAAA,IAAC,CACf,OAAO,GACP,QAAQ,CACP;IAEJ,QAAQ,uIAAA,CAAA,IAAC,CACN,MAAM,GACN,QAAQ,CACP;AAEN;AAGO,eAAe,eAAe,KAA0B;IAC7D,OAAO,mBAAmB;AAC5B;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACtC,MAAM;IACN,OAAO;QAAC,QAAQ;IAAyB;IACzC,QAAQ;QAAC,QAAQ;IAA0B;IAC3C,QAAQ,CAAC;;;;;;;;;;;;;;;GAeR,CAAC;AACJ;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,gBAAgB;IACvC,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\nimport { rateLimitEmail, type RateLimitEmailOutput } from '@/ai/flows/ai-rate-limiter';\nimport type { EmailBatch, EmailResult } from '@/lib/types';\nimport nodemailer from 'nodemailer';\n\nconst FormSchema = z.object({\n  subject: z.string().min(1, 'Subject is required.'),\n  body: z.string().min(1, 'Email body is required.'),\n  recipients: z.string().min(1, 'Recipients are required.'),\n});\n\ntype State = {\n  message?: string | null;\n  errors?: {\n    subject?: string[];\n    body?: string[];\n    recipients?: string[];\n  };\n  batch?: EmailBatch | null;\n};\n\n// Configure Nodemailer with your Gmail credentials\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.GMAIL_EMAIL,\n    pass: process.env.GMAIL_APP_PASSWORD,\n  },\n});\n\n\nexport async function sendBulkEmail(prevState: State, formData: FormData): Promise<State> {\n  const validatedFields = FormSchema.safeParse({\n    subject: formData.get('subject'),\n    body: formData.get('body'),\n    recipients: formData.get('recipients'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: 'Missing Fields. Failed to Send Email.',\n    };\n  }\n\n  if (!process.env.GMAIL_EMAIL || !process.env.GMAIL_APP_PASSWORD || process.env.GMAIL_EMAIL === 'your-email@gmail.com') {\n    return {\n      message: 'Email service is not configured. Please set GMAIL_EMAIL and GMAIL_APP_PASSWORD in your .env file.',\n    };\n  }\n\n  const recipients = validatedFields.data.recipients\n    .split(/[\\n,;]+/)\n    .map((email) => email.trim())\n    .filter((email) => email.length > 0 && z.string().email().safeParse(email).success)\n    .filter((value, index, self) => self.indexOf(value) === index); // Unique emails\n\n  if (recipients.length === 0) {\n    return { message: 'Please provide at least one valid recipient email.' };\n  }\n\n  const { subject, body } = validatedFields.data;\n\n  const results: EmailResult[] = await Promise.all(\n    recipients.map(async (recipient) => {\n      try {\n        // Decide whether to send the email using the AI rate limiter\n        const rateLimitResult: RateLimitEmailOutput = await rateLimitEmail({\n          recipientEmail: recipient,\n          emailContent: `${subject}\\n\\n${body}`,\n          // Using placeholder scores. In a real app, these would be dynamic.\n          senderReputationScore: 0.8,\n          recipientEngagementScore: 0.5,\n        });\n\n        if (rateLimitResult.shouldSendEmail) {\n            // Send mail with defined transport object\n            await transporter.sendMail({\n              from: `\"Bulkmail App\" <${process.env.GMAIL_EMAIL}>`, // sender address\n              to: recipient, // list of receivers\n              subject: subject, // Subject line\n              text: body, // plain text body\n              html: `<p>${body.replace(/\\n/g, '<br>')}</p>`, // html body\n            });\n            return { recipient, status: 'Sent' as const, reason: 'Email sent successfully.' };\n        } else {\n            return { recipient, status: 'Blocked' as const, reason: rateLimitResult.reason };\n        }\n\n      } catch (error) {\n        console.error(`Failed to send email to ${recipient}:`, error);\n        const errorMessage = (error instanceof Error) ? error.message : 'An unknown error occurred.';\n        return { recipient, status: 'Failed' as const, reason: `Failed to send: ${errorMessage}` };\n      }\n    })\n  );\n\n  const batch: EmailBatch = {\n    id: new Date().toISOString(),\n    subject: subject,\n    body: body,\n    recipients: recipients,\n    results,\n    sentAt: new Date().toISOString(),\n  };\n\n  return { message: 'Email batch processing complete.', batch };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {sendBulkEmail as '6061ed9eab1bec6aa26858106807f59ae6f93c9a2e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 488, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}